ng new mi-app

npm install bootstrap
en angular.json-------------------------------------------
"styles": [
  "src/styles.css",
  "node_modules/bootstrap/dist/css/bootstrap.min.css"
],
----------------------------------------------------------
"scripts": [
  "node_modules/bootstrap/dist/js/bootstrap.min.js"
],


Componentes ------------------------------------------------------------------
ng g c components/register
ng g c components/login
ng g c components/home
ng g c components/about
ng g c components/PageNotFound
ng g c components/utils/navbar

ng g c components/character/CharacterList
ng g c components/character/character
ng g c components/character/CharacterDetail


Rutas app-routing.module.ts----------------------------------------------------
const routes: Routes = [
  { path: 'register', component: RegisterComponent },
  { path: 'login', component: LoginComponent },
  { path: 'home', component: HomeComponent },
  { path: 'about', component: AboutComponent },
  {path:'characters', component: CharacterListComponent },
  {path:'characters/:id', component: CharacterDetailComponent },
  { path: '',   redirectTo: '/home', pathMatch: 'full' }, // redirect to `home`
  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page
];


navbar.component.html ------------------------------------------------------------------------------
<nav class="navbar navbar-expand navbar-dark bg-dark">
    <a href="#" class="navbar-brand">Home</a>
    <div class="navbar-nav mr-auto">
        <li class="nav-item">
            <a routerLink="list" class="nav-link">List</a>
        </li>
        <li class="nav-item">
            <a routerLink="add" class="nav-link">Add</a>
        </li>
        <li class="nav-item">
            <a routerLink="/about" class="nav-link">About</a>
        </li>
    </div>
  </nav>

//lo incluimos en los componentes donde se ha de mostrar


creamos el modelo de datos ---------------------------------------------------------------------------------
ng g i models/character

export interface Character {
    id: number;
    name: string;
    status: string;
    species: string;
    gender: string;
    origin: string;
    location: string;
    image: string;
}

creamos el servicio ---------------------------------------------------------------------------------
ng g s services/character

importamos al module HttpClientModule----------------------------------------------------------------
import {HttpClientModule} from '@angular/common/http';

editamos el servicio character ----------------------------------------------------------------------

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, map } from 'rxjs';
import { Character } from '../models/character';


@Injectable({
  providedIn: 'root'
})
export class CharacterService {

  private baseUrl = 'https://rickandmortyapi.com/api/character';

  constructor(private http: HttpClient) { }

  //retorna todo el json de datos
  retornar(): Observable<Character[]> {
    return this.http.get<Character[]>(this.baseUrl + '/1,2,3,4,5');
  }

  //retorna solo los campos que a mi me interesan
  getFilter(): Observable<Character[]>{
    return this.http.get<Character[]>(this.baseUrl + '/1,2,3,4,5').pipe(
      map((response) => {
        // Transformar la respuesta de la API en instancias del modelo Producto
        return response.map((response) => {
          return {
            id: response.id,
            name: response.name,
            status: response.status,
            species: response.species,
            gender: response.gender,
            origin: response.origin,
            location: response.location,
            image: response.image
          } as Character;
        });
      })
    );
  }
}



CharacterListComponent ---------------------------------------------------------------------------------
import { Component } from '@angular/core';
import { Character } from 'src/app/models/character';
import { CharacterService } from 'src/app/services/character.service';

@Component({
  selector: 'app-character-list',
  templateUrl: './character-list.component.html',
  styleUrls: ['./character-list.component.css']
})
export class CharacterListComponent {

  data: Character[] = [];

  constructor(private characters: CharacterService){}

  ngOnInit(){
    this.characters.getFilter()
      .subscribe( 
        (result:Character[]) =>  this.data = result
        )
  }

}

// en su html----------------------------------------------------------------------------------------------
<p>character-list works!</p>

{{data | json}}


//definimos las targetas de personaje - Character
-----------------------------------------------------------------------------------------------------------
import { Component, OnInit, Input } from '@angular/core';

@Component({
  selector: 'app-character',
  templateUrl: './character.component.html',
  styleUrls: ['./character.component.css']
})
export class CharacterComponent implements OnInit {

  @Input() characters: any = null;

  constructor() { }

  ngOnInit(): void {
  }

}

y su html -------------------------------------------------------------------------------------------------
<div class="card">
    <img src="{{characters.image}}" class="card-img-top" alt="...">
    <div class="card-body">
      <h5>{{characters.name}}</h5>
      <p class="card-text">
      Status: {{characters.status}}<br>
      Species: {{characters.species}}<br>
      Id: {{characters.id}}</p>
    </div>
    <a [routerLink] = "['/characters', characters.id]" class="btn btn-primary ver-mas">Ver m√°s</a>
  </div>

su css ----------------------------------------------------------------------------------------------------
.card {
    width: 16rem;
    margin: 1rem;
  }

modificamos la lista de personajes y su html ----------------------------------------------------------------


